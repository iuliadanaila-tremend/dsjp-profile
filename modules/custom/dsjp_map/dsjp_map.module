<?php

/**
 * @file
 * Provides main functionality for dsjp_map module.
 */

use Drupal\Component\Serialization\Json;

/**
 * Implements hook_preprocess_HOOK().
 */
function dsjp_map_preprocess_paragraph(&$variables) {
  global $base_url;

  $paragraph = $variables['paragraph'];
  if ($paragraph->bundle() == 'dsj_map') {

    $country_service = \Drupal::service('dsjp_map.country_service');

    $colors = [
      "#4073AF",
      "#004494",
      "#003D84",
      "#003776",
    ];

    $countriesMap = $country_service->getCountriesMap();

    // Set defaults for small countries data.
    $variables['small_countries'] = [
      'MT' => [
        'tooltip' => '',
        'color' => '#ffffff',
      ],
      'CY' => [
        'tooltip' => '',
        'color' => '#ffffff',
      ],
    ];

    $data = [
      'countries' => array_values($countriesMap),
      'tooltip' => [],
      'color' => [],
    ];
    $data['countries'][] = 'KS*0';

    // Send the data to javascript to populate de map.
    $components = $paragraph->get('field_dsj_map_component')
      ->referencedEntities();

    $eu_average = $paragraph->get('field_dsj_eu_average')->value;

    [
      $minScore,
      $maxScore,
      $chunkSize,
      $intervals,
      $avg,
    ] = dsjp_map_get_scores_interval($components, $eu_average);

    if (!empty($components)) {
      foreach ($components as $component) {
        $country_field = $component->get('field_dsj_country')
          ->referencedEntities();
        $country_term = reset($country_field);
        [$code, $threeCode] = _dsjp_map_get_country_code_by_name($country_term->get('field_dsj_country_code')->getValue()[0]['target_id'], $countriesMap);
        if (!empty($code)) {
          _dsjp_map_restrict_map_countries($code);
          $data['tooltip'][$code] = $component->get('field_dsj_tooltip')->value;

          $score = $component->get('field_dsj_score')->value;
          $segment = ($score != $maxScore) ? floor(($score - $minScore) / $chunkSize) : 3;
          $data['color'][$code] = $colors[$segment];
          $data['threeCode'][$code] = $threeCode;
          $variables['countries'][$code] = [
            'code' => $code,
            'threeCode' => $threeCode,
            'label' => $country_term->label(),
            'score' => $score,
            'position' => (100 * ($score - $minScore)) / ($maxScore - $minScore),
            'content' => $component->get('field_dsj_body')->value,
            'avg_score' => $avg,
            'avg_position' => (100 * ($avg - $minScore)) / ($maxScore - $minScore),
            'title' => $component->get('field_dsj_title')->value,
            'linked_page' => _dsjp_map_get_country_page_by_tid($country_term->id()),
          ];
          // For some countries, we need to pass some variables to twig.
          if (in_array($code, ['MT', 'CY'])) {
            $variables['small_countries'][$code] = [
              'tooltip' => $data['tooltip'][$code],
              'color' => $data['color'][$code],
            ];
          }
        }
      }
    }

    $variables['colors'] = $colors;
    $variables['intervals'] = $intervals;

    // Create the map script loader.
    $variables['map_widget'] = [
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#value' => Json::encode([
        'service' => 'map',
        'version' => '3.0',
        'custom' => $base_url . '/' . \Drupal::service('extension.list.module')->getPath('dsjp_map') . '/js/dsjp_map.js',
      ]),
      '#attributes' => ['type' => 'application/json'],
    ];
    $variables['#attached']['drupalSettings']['dsjp_map']['mapData'] = $data;
    $variables['#attached']['library'][] = 'dsjp_map/flags';
    $variables['#attached']['library'][] = 'dsjp_map/map_countries';
    $variables['#attached']['library'][] = 'oe_webtools/drupal.webtools-smartloader';
  }
}

/**
 * Build min and max ends of progress bar.
 *
 * @param array $components
 *   Paragraph map components.
 * @param float $eu_average
 *   The eu average set by user.
 *
 * @return int[]
 *   Return min and max scores for map
 */
function dsjp_map_get_scores_interval(array $components, $eu_average): array {
  $minScore = $maxScore = 0;
  $sum = 0;
  $avg = 0;
  if (!empty($components)) {
    foreach ($components as $component) {
      $score = (float) $component->get('field_dsj_score')->value;
      if ($maxScore == 0) {
        $minScore = $score;
      }

      if ($score > $maxScore) {
        $maxScore = $score;
      }
      if ($score < $minScore) {
        $minScore = $score;
      }
      $sum += $score;
    }
    $avg = round($sum / count($components), 2);
  }
  if (!empty($eu_average)) {
    if ($eu_average < $minScore) {
      $minScore = $eu_average;
    }
    if ($eu_average > $maxScore) {
      $maxScore = $eu_average;
    }
    $avg = $eu_average;
  }

  $minScore = (floor($minScore / 20)) * 20;
  $maxScore = (ceil($maxScore / 20)) * 20;
  $chunkSize = ($maxScore - $minScore) / 4;
  $intervals = [
    $minScore,
    $minScore + $chunkSize,
    $minScore + 2 * $chunkSize,
    $minScore + 3 * $chunkSize,
    $maxScore,
  ];

  return [$minScore, $maxScore, $chunkSize, $intervals, $avg];
}

/**
 * Restricts the map countries in order to remove overseas regions.
 *
 * @param string $code
 *   The country code.
 */
function _dsjp_map_restrict_map_countries(&$code) {
  // The "-" will remove the overseas regions as we don't need them.
  if (in_array($code, ['FR', 'PT', 'ES'])) {
    $code .= '-';
  }
}

/**
 * Gets the country code by name.
 *
 * @param string $skosCode
 *   Country skos code.
 * @param array $countriesMap
 *   Array of countries 3code => 2code.
 *
 * @return string
 *   The country code if found, empty string otherwise.
 */
function _dsjp_map_get_country_code_by_name($skosCode, array $countriesMap) {
  // Split the code by slashes and get the country code.
  $code = explode('/', $skosCode);
  $threeCode = end($code);
  $twoCode = $countriesMap[$threeCode];

  return [$twoCode, $threeCode];
}

/**
 * Gets the country page CT by country tid.
 *
 * @param int $tid
 *   Country tid.
 *
 * @return false
 *   The return value.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function _dsjp_map_get_country_page_by_tid($tid) {
  $countryPages = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
    'field_dsj_geographic_scope' => $tid,
    'type' => 'dsj_country_page',
  ]);

  if (!empty($countryPages)) {
    $node = array_shift($countryPages);
    return $node->toUrl()->toString();
  }

  return FALSE;
}

/**
 * Implements hook_preprocess_node().
 */
function dsjp_map_preprocess_node(&$variables) {
  if ($variables['node']->getType() !== 'dsj_country_page') {
    return FALSE;
  }
  $country_service = \Drupal::service('dsjp_map.country_service');

  $country_field = $variables['node']->get('field_dsj_geographic_scope')
    ->referencedEntities();
  $country_term = reset($country_field);

  // Calculate progress variables.
  $country_codes = $country_service->getCountriesMap();

  if ($country_term) {
    [$code, $threeCode] = _dsjp_map_get_country_code_by_name($country_term->get('field_dsj_country_code')->getValue()[0]['target_id'], $country_codes);

    $variables['threeCode'] = mb_strtolower($threeCode);

    $all_countries = $country_service->getAllCountryPages();
    $override_avg = $country_service->getMapAverage();
    $intervals = $country_service->getScoresIntervals($all_countries, $override_avg);
    $score = $variables['node']->get('field_dsj_score')->value;
    $variables['country'] = [
      'code' => $code,
      'threeCode' => $threeCode,
      'label' => $country_term->label(),
      'score' => $score,
      'position' => (100 * ($score - $intervals['minScore'])) / ($intervals['maxScore'] - $intervals['minScore']),
      'avg_score' => $intervals['avg'],
      'avg_position' => (100 * ($intervals['avg'] - $intervals['minScore'])) / ($intervals['maxScore'] - $intervals['minScore']),
    ];
    $variables['colors'] = $country_service->getProgressColors();
    $variables['intervals'] = $intervals['intervals'];

    // Add regionally related views block.
    $variables['regionaly_related_view_block'] = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#prefix' => '<div class="ecl-container"><div class="ecl-row"><div class="ecl-col-xl-12">',
      'suffix' => '</div></div></div>',
    ];
    $variables['regionaly_related_view_block']['header'] = $country_service->getRegionRelatedContentHeader($country_term);
    $variables['regionaly_related_view_block']['view'] = $country_service->getRegionRelatedContentView($country_term->id());
  }

  // Add library for the flag.
  $variables['#attached']['library'][] = 'dsjp_map/flags';
}
