<?php

/**
 * @file
 * Provides main functionality for dsjp_pledge module.
 */

use Drupal\block\Entity\Block;
use Drupal\block_content\BlockContentInterface;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\dsjp_pledge\GroupServiceInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\group\Entity\GroupContent;
use Drupal\group\Entity\GroupContentInterface;
use Drupal\group\Entity\GroupInterface;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\user\Entity\User;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_theme().
 */
function dsjp_pledge_theme($existing, $type, $theme, $path) {
  return [
    'pledge_page_initiatives' => [
      'variables' => [
        'education' => [],
        'labour_force' => [],
        'ict_professionals' => [],
        'other' => [],
        'url_access' => FALSE,
      ],
    ],
    'pledge_welcome' => [
      'variables' => [
        'content' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_field_group_form_process_alter().
 */
function dsjp_pledge_field_group_form_process_alter(array &$element, &$group, &$complete_form) {
  if (isset($element['#group_name']) && $element['#group_name'] == 'group_authoring_information' && $element['#bundle'] == 'dsj_pledge') {
    $element['#access'] = in_array('dsj_reviewer', \Drupal::currentUser()->getRoles());
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function dsjp_pledge_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  if ($form_state->getFormObject()->getFormId() == 'node_dsj_pledge_initiative_form') {
    if ($context['items']->getName() == 'field_dsj_initiative_type') {
      $type = \Drupal::requestStack()->getCurrentRequest()->query->get('type');
      $element['value']['#default_value'] = $type;
    }
    if ($context['items']->getName() == 'field_dsj_pledge') {
      $pledge_id = \Drupal::requestStack()->getCurrentRequest()->query->get('pledge_id');
      $pledge = Node::load($pledge_id);
      if ($pledge instanceof NodeInterface) {
        $element['target_id']['#default_value'] = $pledge;
      }
    }
  }
  if ($context['items']->getName() == 'field_dsj_link' && isset($element['#bundle']) && $element['#bundle'] == 'dsj_organisation_contact') {
    $element['uri']['#title'] = t('Website');
  }
  if (in_array($context['items']->getName(), [
    'field_dsj_contact_name',
    'field_dsj_contact_email',
  ]) && $context['delta'] == 0 && $form_state->getFormObject()->getFormId() == 'group_dsj_organization_add_form') {
    $user = User::load(\Drupal::currentUser()->id());
    if ($context['items']->getName() == 'field_dsj_contact_name') {
      $first_name = $user->get('field_dsj_firstname')->value;
      $last_name = $user->get('field_dsj_lastname')->value;
      $element['value']['#default_value'] = $first_name . ' ' . $last_name;
    }
    else {
      $element['value']['#default_value'] = \Drupal::currentUser()->getEmail();
    }
  }
  $target_type = $context['items']->getFieldDefinition()->getFieldStorageDefinition()->getSetting('target_type');
  if ($context['items']->getName() === 'entity_id' && $element['#entity_type'] = 'group_content' && $target_type == 'user') {
    $element['target_id']['#selection_handler'] = 'default:user_pledge_organization';
  }
  if ($context['items']->getName() == 'field_dsj_contact' && isset($element['#paragraph_type']) && $element['#paragraph_type'] == 'dsj_organisation_contact') {
    if (isset($element['top'])) {
      unset($element['top']);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dsjp_pledge_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_dsj_pledge_initiative_form' || $form_id == 'node_dsj_pledge_initiative_edit_form') {
    $query = \Drupal::requestStack()->getCurrentRequest()->query;
    $node = $form_state->getFormObject()->getEntity();
    $initiative_type = "";
    if (!empty($query->get('type'))) {
      $initiative_type = $query->get('type');
    }
    elseif (!$node->isNew()) {
      $initiative_type = $node->get('field_dsj_initiative_type')->value;
    }
    if (!empty($query->get('pledge_id'))) {
      $pledge_id = $query->get('pledge_id');
    }
    elseif (!$node->isNew()) {
      $pledge_id = $node->get('field_dsj_pledge')->target_id;
    }
    if (empty($initiative_type) || empty($pledge_id)) {
      \Drupal::messenger()->addWarning(t('Please create/edit the initiative from a pledge page.'));
    }
    $form['initiative_type'] = [
      '#type' => 'hidden',
      '#value' => $initiative_type,
    ];
    $form['field_dsj_action_type']['widget']['#ajax'] = [
      'callback' => 'dsjp_pledge_action_type_callback',
      'method' => 'replace',
    ];
    $form['field_dsj_pledge_methodology']['#prefix'] = '<div id="methodology-wrapper">';
    $form['field_dsj_pledge_methodology']['#suffix'] = '</div>';
    $form['field_dsj_performance']['#prefix'] = '<div id="performance-wrapper">';
    $form['field_dsj_performance']['#suffix'] = '</div>';
    $form['field_dsj_initiative_beneficiary']['#prefix'] = '<div id="beneficiary-wrapper">';
    $form['field_dsj_initiative_beneficiary']['#suffix'] = '</div>';
    $form['field_dsj_initiative_beneficiary']['#states'] = [
      'visible' => [
        ':input[name="field_dsj_action_type"]' => ['!value' => '_none'],
      ],
    ];
    $form['field_dsj_digital_skill_level']['#states'] = [
      'visible' => [
        ':input[name="field_dsj_action_type"]' => ['value' => 'training'],
      ],
    ];
    $form['field_dsj_pledge_methodology']['#states'] = [
      'visible' => [
        ':input[name="field_dsj_action_type"]' => [
          ['value' => 'training'],
          ['value' => 'placement'],
          ['value' => 'awareness_raising'],
          ['value' => 'courses_programmes'],
          ['value' => 'facilitating_development'],
        ],
      ],
    ];
    $form['field_dsj_performance']['#states'] = [
      'visible' => [
        ':input[name="field_dsj_action_type"]' => ['!value' => '_none'],
      ],
    ];
    $form['field_dsj_initiative_type']['#access'] = FALSE;
    $form['field_dsj_pledge']['#access'] = in_array('administrator', \Drupal::currentUser()->getRoles());
    $form['field_dsj_quantity']['#access'] = FALSE;

    if (!empty($form_state->getValues())) {
      $action = $form_state->getValue('field_dsj_action_type')[0]['value'];
    }
    elseif ($node) {
      $action = $node->field_dsj_action_type->value;
    }
    else {
      $action = '';
    }
    if (!empty($action)) {
      foreach (['field_dsj_pledge_methodology', 'field_dsj_performance'] as $field) {
        $options = $form[$field]['widget']['#options'];
        $new_options = ['_none' => t('None')];
        if (isset($options[$action])) {
          $new_options += $options[$action];
        }
        $form[$field]['widget']['#options'] = $new_options;
      }
    }
    $form['beneficiary_description'] = [
      '#type' => 'fieldset',
      '#weight' => 18,
      '#states' => [
        'visible' => [
          ':input[name="field_dsj_action_type"]' => ['!value' => '_none'],
        ],
      ],
      'description' => [
        '#markup' => _dsjp_pledge_get_initiative_markup($initiative_type),
        '#prefix' => '<div>' . t('@type - Beneficiaries.', [
          '@type' => dsjp_pledge_initiative_type($initiative_type),
        ]) . '</div>',
      ],
    ];
    array_unshift($form['#validate'], 'dsjp_pledge_validate_initiative_callback');
    $form['actions']['submit']['#submit'][] = 'dsjp_pledge_submit_initiative_callback';
    $form['body']['widget'][0]['#allowed_formats'] = ['full_html'];
  }
  elseif ($form_id == 'node_dsj_pledge_form' || $form_id == 'node_dsj_pledge_edit_form') {
    if ($form_id == 'node_dsj_pledge_form') {
      $form['actions']['submit']['#submit'][] = 'dsjp_pledge_submit_callback';
      $form['moderation_state']['widget'][0]['state']['#options'] = [
        'draft' => t('Draft'),
      ];
    }
    $form['field_dsj_payment_agreed']['#states'] = [
      'visible' => [
        ':input[name="field_dsj_pledges_activity_pay[value]"]' => ['checked' => TRUE],
      ],
    ];
    $block = \Drupal::entityTypeManager()->getStorage('block_content')->load(22);
    if ($block instanceof BlockContentInterface) {
      $build = \Drupal::entityTypeManager()->getViewBuilder('block_content')->view($block);
      $build['#weight'] = -10;
      $form['description'] = $build;
    }
    $form['body']['widget'][0]['#allowed_formats'] = ['full_html'];
    $roles = \Drupal::currentUser()->getRoles();
    $form['moderation_state']['#access'] = in_array('administrator', $roles) || in_array('dsj_reviewer', $roles) || in_array('community_manager', $roles);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dsjp_pledge_form_content_moderation_entity_moderation_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  array_unshift($form['#validate'], 'dsjp_pledge_content_moderation_validate');
}

/**
 * Compose the initiative type title.
 */
function dsjp_pledge_initiative_type($initiative_type) {
  if ($initiative_type == 'ict_professionals') {
    return 'ICT professionals';
  }
  return Unicode::ucwords(str_replace('_', ' ', $initiative_type));
}

/**
 * Validation callback for pledge content moderation form.
 */
function dsjp_pledge_content_moderation_validate(array &$form, FormStateInterface $form_state) {
  if (empty($form_state->getValue('new_state'))) {
    $form_state->setErrorByName('new_state', t('Please provide the new moderation state before submitting.'));
  }
}

/**
 * Gets the beneficiary text to be displayed.
 *
 * @param string $type
 *   Initiative type.
 *
 * @return \Drupal\Core\StringTranslation\TranslatableMarkup
 *   The text to be displayed.
 */
function _dsjp_pledge_get_initiative_markup($type) {
  $label = $item = '';
  switch ($type) {
    case 'ict_professionals':
      $label = t('All ICT Professionals');
      break;

    case 'other':
      $label = t('All Citizen');
      break;

    case 'education':
      $label = t('All Education Sector Participants');
      break;

    case 'labour_force':
      $label = t('All Labour Force Sector Participants');
      break;
  }
  return t('Please select the beneficiaries of this action type and insert the target number for each beneficiary. If the action type is applicable to all beneficiaries or individual beneficiaries cannot be quantified, please select “@label” only and enter the target number on the right.', [
    '@label' => $label,
  ]);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dsjp_pledge_form_group_content_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $group = \Drupal::routeMatch()->getParameter('group');
  if ($group instanceof GroupInterface && strpos($form_id, 'group_content_group_content_type') !== FALSE) {
    $groupContent = $form_state->getFormObject()->getEntity();
    if ($groupContent instanceof GroupContentInterface) {
      if ($groupContent->getGroupContentType()->getContentPluginId() == 'group_node:dsj_pledge') {
        $form['actions']['submit']['#submit'][] = 'dsjp_pledge_submit_organization_callback';
      }
      elseif ($groupContent->getGroupContentType()->getContentPluginId() == 'group_invitation' && $groupContent->getGroup()->bundle() == 'dsj_organization') {
        $form['#validate'][] = 'dsjp_pledge_validate_invitee_mail';
      }
    }

  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function dsjp_pledge_form_group_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Hide the revision message for authenticated only users.
  if (strpos($form_id, 'group_dsj_organization') === 0) {
    $roles = \Drupal::currentUser()->getRoles();
    $form['revision_log_message']['#access'] = in_array('administrator', $roles);
    $form['moderation_state']['#access'] = in_array('community_manager', $roles) || in_array('administrator', $roles);
    $form['field_group_description']['widget'][0]['#allowed_formats'] = ['full_html'];
    $form['field_dsj_endorse']['widget']['value']['#title'] = t("My organisation is actively improving digital skills in Europe and I would like it to join the European Digital Skills and Jobs Coalition. On behalf of my organisation I commit to the objectives of the <a href='@proposition_url' target='_blank'>Coalition's value proposition</a> and I support the EU-wide efforts to reach the digital skills targets described in the <a href='@strategy_url' target='_blank'>Digital decade strategy</a>", [
      '@proposition_url' => Url::fromUserInput('/valueproposition')->toString(),
      '@strategy_url' => Url::fromUserInput('/actions/european-initiatives/digital-decade')->toString(),
    ]);
    $form['uid']['#access'] = in_array('community_manager', $roles) || in_array('administrator', $roles);
  }
}

/**
 * Submit callback for organization group.
 */
function dsjp_pledge_submit_organization_callback(array &$form, FormStateInterface $form_state) {
  $entity = $form_state->getValue('entity_id');
  if (!empty($entity[0]['target_id'])) {
    $node = Node::load($entity[0]['target_id']);
    if ($node instanceof NodeInterface && $node->bundle() == 'dsj_pledge') {
      $group = \Drupal::routeMatch()->getParameter('group');
      if ($group instanceof GroupInterface) {
        $group->set('field_dsj_is_pledger', TRUE);
        $group->save();
        Cache::invalidateTags(['node:' . $node->id()]);
      }
    }
  }
}

/**
 * Submit callback for pledge content type add form.
 */
function dsjp_pledge_submit_callback(array &$form, FormStateInterface $form_state) {
  $group = \Drupal::routeMatch()->getParameter('group');
  if ($group instanceof GroupInterface) {
    $group->set('field_dsj_is_pledger', TRUE);
    $group->save();
  }
}

/**
 * Validation callback for pledge initiative.
 */
function dsjp_pledge_validate_initiative_callback(array &$form, FormStateInterface $form_state) {
  $pledge = $form_state->getValue('field_dsj_pledge');
  $type = $form_state->getValue('field_dsj_initiative_type');
  if (empty($pledge[0]['target_id']) || empty($type[0]['value'])) {
    $form_state->setErrorByName('field_dsj_pledge', t('Unable to create initiative without a pledge relationship.'));
  }
  $beneficiaries = $form_state->getValue('field_dsj_initiative_beneficiary');
  $quantity = 0;
  $valid = FALSE;
  if (!empty($beneficiaries)) {
    foreach ($beneficiaries as $beneficiary) {
      if ($beneficiary['status'] == 1) {
        $quantity += $beneficiary['number'];
        if ($beneficiary['number'] > 0) {
          $valid = TRUE;
        }
        else {
          $form_state->setErrorByName('field_dsj_pledge', t('Unable to create initiative if target number is not greater than 0.'));
        }
      }
    }
  }
  if (!$valid) {
    $form_state->setErrorByName('field_dsj_beneficiary', t('Your initiative should contain at least 1 beneficiary'));
  }
  else {
    $form_state->setValue(['field_dsj_quantity', 0, 'value'], $quantity);
  }
}

/**
 * Submit callback for pledge initiative.
 */
function dsjp_pledge_submit_initiative_callback(array &$form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  Cache::invalidateTags(['node:' . $node->get('field_dsj_pledge')->target_id]);
  $form_state->setRedirect('entity.node.canonical', ['node' => $node->get('field_dsj_pledge')->target_id]);
}

/**
 * Ajax request for methodology replacement.
 */
function dsjp_pledge_action_type_callback(array &$form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  $form_state->setRebuild();
  $response->addCommand(new ReplaceCommand("#methodology-wrapper", $form['field_dsj_pledge_methodology']));
  $response->addCommand(new ReplaceCommand("#performance-wrapper", $form['field_dsj_performance']));
  $response->addCommand(new ReplaceCommand('#beneficiary-wrapper', $form['field_dsj_initiative_beneficiary']));

  return $response;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dsjp_pledge_preprocess_facets_item_list(&$variables) {
  if (isset($variables['facet']) && $variables['facet']->id() == 'dsj_is_pledger') {
    foreach ($variables['items'] as &$items) {
      if ($items['#title']['#raw_value'] == 1) {
        $items['#title']['#value'] = t('Pledger');
      }
      else {
        $items['#title']['#value'] = t('Member');
      }
    }
  }
  elseif (isset($variables['facet']) && $variables['facet']->id() == 'dsj_pledges_initiative_type') {
    $facet = $variables['facet'];
    $widget = $facet->getWidget();

    if ($widget['type'] == 'links') {
      foreach ($variables['items'] as &$item) {
        $item['#wrapper_attributes']['class'][] = str_replace(' ', '', $item['#title']['#raw_value']);
      }
    }
  }

}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function dsjp_pledge_node_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($entity->bundle() == 'dsj_pledge_initiative') {
    if ($operation == 'view' && !in_array('dsj_reviewer', \Drupal::currentUser()->getRoles())) {
      return AccessResult::forbidden();
    }
    if ($operation == 'view' && in_array('dsj_reviewer', \Drupal::currentUser()->getRoles())) {
      return AccessResult::allowed();
    }
    if ($operation == 'update') {
      $current_state = $entity->get('moderation_state')->getString();
      if (in_array($current_state, ['draft', 'needs_changes'])) {
        if ($account->id() != $entity->getOwnerId()) {
          return AccessResult::forbidden();
        }
      }
      elseif (in_array($current_state, [
        'needs_safe_validation',
        'ready_for_review',
        'archived',
      ])) {
        if (empty(array_intersect(['dsj_content_editor', 'dsj_reviewer'], $account->getRoles()))) {
          return AccessResult::forbidden();
        }
      }
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function dsjp_pledge_group_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($entity->bundle() == 'dsj_organization' && $operation == 'view' && !$account->isAnonymous()) {
    $membership = \Drupal::service('dsjp_pledge.group_service')->loadMembershipByUser($account, GroupServiceInterface::GROUP_TYPE_ORGANIZATION);
    if (!empty($membership) && $membership->getGroup()->id() == $entity->id()) {
      return AccessResult::allowed();
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dsjp_pledge_preprocess_node_add_list(&$variables) {
  if (isset($variables['types']['dsj_pledge_initiative'])) {
    unset($variables['types']['dsj_pledge_initiative']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dsjp_pledge_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-pledges-page') {
    $form['#prefix'] = '<h2 class="ecl-u-type-heading-2">' . t('Filter your results') . '</h2>';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dsjp_pledge_preprocess_bef_links(&$variables) {
  if (isset($variables['element']['#name']) && $variables['element']['#name'] == 'initiative_type') {
    if (isset($variables['children'][0])) {
      unset($variables['children'][0]);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dsjp_pledge_preprocess_views_view(&$variables) {
  if ($variables['view']->id() == 'pledges' && $variables['view']->current_display == 'user_pledges') {
    $url = _dsjp_pledge_get_add_pledge_url() ?? Url::fromRoute('view.groups.user_pledge_organisations', [
      'user' => \Drupal::currentUser()->id(),
    ]);
    $variables['add_pledge_url'] = $url->toString();
    $variables['empty'] = t("If you can't find the content that you are looking for, create a new pledge for one of your organisations @link.", [
      '@link' => Link::fromTextAndUrl(t('here'), $url)->toString(),
    ]);
    $current_path = \Drupal::service('path.current')->getPath();
    $path_args = explode('/', $current_path);
    if (\Drupal::currentUser()->id() == $path_args[2]) {
      $variables['show_add_pledge_button'] = TRUE;
    }
    else {
      $variables['show_add_pledge_button'] = FALSE;
    }
  }
}

/**
 * Helper function to generate the url to add Pledge.
 *
 * @return \Drupal\Core\Url|null
 *   Return Url to add a new Pledge node.
 */
function _dsjp_pledge_get_add_pledge_url(): ?Url {
  $url = NULL;
  /** @var \Drupal\group\GroupMembership[] $memberships */
  $memberships = \Drupal::service('group.membership_loader')
    ->loadByUser(\Drupal::currentUser());
  if (!empty($memberships)) {
    foreach ($memberships as $membership) {
      if ($membership->getGroup()->getGroupType()->id() == GroupServiceInterface::GROUP_TYPE_ORGANIZATION) {
        $url = Url::fromRoute('entity.group_content.create_form', [
          'group' => $membership->getGroup()->id(),
          'plugin_id' => 'group_node:dsj_pledge',
        ]);
        break;
      }
    }
  }

  return $url;
}

/**
 * Helper function to generate the link to add Pledge.
 *
 * @param \Drupal\group\Entity\GroupInterface|null $group
 *   The group entity.
 *
 * @return array|mixed[]|null
 *   Return Link to add a new Pledge node.
 */
function _dsjp_pledge_get_add_pledge_link($group = NULL): ?array {
  $link = NULL;
  if (Drupal::currentUser()->isAuthenticated()) {
    $service = Drupal::service('dsjp_pledge.group_service');
    $membership = $service->userHasOrganizationGroupRole(Drupal::currentUser(), [
      'dsj_organization-coordinator',
      'dsj_organization-admin',
    ], ['administrator', 'dsj_reviewer']);
    if ($membership) {
      $show_link = FALSE;
      if (!empty($group)) {
        $user = User::load(\Drupal::currentUser()->id());
        $group_membership = $service->loadMembershipByUser($user, GroupServiceInterface::GROUP_TYPE_ORGANIZATION);
        if (!empty($group_membership) && $group_membership->getGroup()->id() == $group->id()) {
          $show_link = TRUE;
        }
      }
      else {
        $show_link = TRUE;
      }
      if ($show_link) {
        $url = _dsjp_pledge_get_add_pledge_url() ?? Url::fromRoute('view.pledges.user_pledges', [
          'user' => Drupal::currentUser()->id(),
        ]);
        $link = Link::fromTextAndUrl(t('Create a new pledge'), $url)->toRenderable();
        $link['#attributes']['class'][] = 'add-new-pledge';
      }
    }
  }

  return $link;
}

/**
 * Set dynamic allowed values for the pledge methodology field.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function dsjp_pledge_methodology_field_values(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $values = [
    'training' => [
      'online' => t('Online'),
      'face_to_face' => t('Face-to-face'),
      'online_face_to_face' => t('Online & Face-to-face'),
    ],
    'placement' => [
      'scholarship' => t('Scholarship'),
      'internship' => t('Internship'),
      'traineeship' => t('Traineeship'),
    ],
    'awareness_raising' => [
      'events' => t('Events'),
      'publications' => t('Publications'),
      'other' => t('Other'),
    ],
    'courses_programmes' => [
      'supporting_development' => t('Supporting the development of courses'),
      'providing_access' => t('Providing access to courses'),
    ],
    'facilitating_employment' => [
      'job_matching' => t('Job matching'),
      'certification' => t('certification'),
      'examination' => t('Examination'),
    ],
  ];

  return $values;
}

/**
 * Set dynamic allowed values for the organisation subcategory field.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function dsjp_pledge_subcategory_field_values(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  return [
    'policy_maker' => [
      'local_regional' => t('Local/ Regional'),
      'national' => t('National'),
      'european' => t('European'),
    ],
    'training_provider' => [
      'ict_provider' => t('ICT Training provider'),
      'non_ict_provider' => t('Non-ICT Training provider'),
    ],
    'education_provider' => [
      'primary_education' => t('Primary Education provider'),
      'secondary_education' => t('Secondary Education provider'),
      'tertiary_education' => t('Tertiary Education provider'),
      'vocabulary_education' => t('Vocational Education provider'),
    ],
    'industry_partner' => [
      'itc_company' => t('ITC Company'),
      'non_itc_company' => t('Non-ITC Company'),
      'business_association' => t('Business Association'),
      'professional_association' => t('Professional Association'),
      'trade_union' => t('Trade Unions'),
    ],
    'society_other' => [
      'ngo' => t('NGO'),
      'employment_platforms' => t('Employment Platforms'),
      'digital_innovation' => t('Digital Innovation Hubs'),
      'living_labs' => t('Living Labs'),
      'other' => t('Other'),
    ],
  ];
}

/**
 * Set dynamic allowed values for the pledge performance field.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function dsjp_pledge_performance_field_values(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $values = [
    'training' => [
      'people_trained' => t('Number of people trained'),
      'people_certified' => t('Number of people certified'),
    ],
    'placement' => [
      'people_placed' => t('Number of people placed'),
    ],
    'awareness_raising' => [
      'people_reached' => t('Number of people reached'),
    ],
    'courses_programmes' => [
      'courses' => t('Number of courses'),
    ],
    'facilitating_employment' => [
      'matched_jobs' => t('Number of matched jobs'),
      'certificates_issued' => t('Number of certificates issued'),
      'examinations_corrected' => t('Number of examinations corrected'),
    ],
    'collaboration' => [
      'collaborating_partners' => t('Number of collaborating partners'),
    ],
  ];

  return $values;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dsjp_pledge_preprocess_node(&$variables) {
  $node = $variables['node'];
  if ($node->bundle() == 'dsj_pledge' && isset($variables['content']['content_moderation_control'])) {
    $initiatives = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
      'field_dsj_pledge' => $variables['node']->id(),
      'type' => 'dsj_pledge_initiative',
    ]);
    if ($variables['content']['content_moderation_control']['submit']) {
      $variables['content']['content_moderation_control']['submit']['#prefix'] = t('In order to submit a pledge, you have to create at least one initiative');
      $variables['content']['content_moderation_control']['submit']['#value'] = t('Submit');
    }
    if (empty($initiatives)) {
      $variables['content']['content_moderation_control']['submit']['#attributes']['disabled'] = TRUE;
    }
  }
}

/**
 * Implements hook_block_access().
 */
function dsjp_pledge_block_access(Block $block, $operation, AccountInterface $account) {
  if ($block->id() == 'pledgeinitiatives' && (\Drupal::routeMatch()->getRouteName() != 'entity.node.canonical' || $operation != 'view')) {
    return AccessResult::forbidden();
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function dsjp_pledge_group_insert(EntityInterface $entity) {
  // Add admin role to organization group creator when the group gets created.
  if ($entity->bundle() == GroupServiceInterface::GROUP_TYPE_ORGANIZATION) {
    $membership = $entity->getMember($entity->getOwner());
    $group_content = $membership->getGroupContent();
    if ($group_content instanceof GroupContentInterface) {
      $group_content->group_roles->target_id = 'dsj_organization-admin';
      $group_content->save();
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function dsjp_pledge_dsj_pledge_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($operation === 'update' && !$entity->isNew()) {
    if ($entity->hasField('moderation_state')) {
      $current_state = $entity->get('moderation_state')->getString();
      $states = ['needs_changes', 'draft'];
      if ($entity->getOwnerId() == $account->id() && in_array($current_state, $states)) {
        return AccessResult::allowed();
      }
      $group_content = GroupContent::loadByEntity($entity);
      foreach ($group_content as $gcontent) {
        $group = $gcontent->getGroup();
        if ($group->getGroupType()->id() == GroupServiceInterface::GROUP_TYPE_ORGANIZATION) {
          $members = $group->getMembers();
          foreach ($members as $member) {
            if ($member->getUser()->id() == $account->id()) {
              $service = \Drupal::service('dsjp_pledge.group_service');
              $membership = $service->userHasOrganizationGroupRole($account, [
                'dsj_organization-coordinator',
                'dsj_organization-admin',
              ]);
              if ($membership) {
                return AccessResult::allowed();
              }
            }
          }
        }
      }
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dsjp_pledge_preprocess_block(&$variables) {
  if ($variables['plugin_id'] == 'local_actions_block' && $variables['elements']['#id'] == 'primaryadminactions') {
    $route = \Drupal::routeMatch();
    if ($route->getRouteName() == 'view.group_members.page_1' && $route->getParameter('group')->bundle() == 'dsj_organization') {
      $block = \Drupal::entityTypeManager()->getStorage('block_content')->load(23);
      if ($block instanceof BlockContentInterface) {
        $variables['content']['information'] = \Drupal::entityTypeManager()->getViewBuilder('block_content')->view($block);
      }
    }
  }
}

/**
 * Implements hook_tokens_alter().
 */
function dsjp_pledge_tokens_alter(array &$replacements, array $context, BubbleableMetadata $bubbleable_metadata) {
  if (isset($replacements['[node:url]']) && isset($context['data']['node'])) {
    // Replace pledge initiative url with the parent pledge one.
    if ($context['data']['node']->bundle() == 'dsj_pledge_initiative') {
      $pledge = $context['data']['node']->get('field_dsj_pledge')->referencedEntities();
      if (!empty($pledge)) {
        $replacements['[node:url]'] = Url::fromRoute(
          'entity.node.canonical',
          ['node' => reset($pledge)->id()],
          ['absolute' => TRUE],
        )->toString();
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dsjp_pledge_form_bulk_group_invitation_alter(&$form, FormStateInterface $form_state, $form_id) {
  $group = \Drupal::routeMatch()->getParameter('group');
  if ($group instanceof GroupInterface && $group->bundle() == 'dsj_organization') {
    $form['#validate'][] = 'dsjp_pledge_validate_invitee_mail';
  }
}

/**
 * Validation callback for organisation invite.
 */
function dsjp_pledge_validate_invitee_mail(&$form, FormStateInterface $form_state) {
  $invalid_mails = [];
  $name = "";
  if ($form_state->hasValue('invitee_mail')) {
    $mails = $form_state->getValue('invitee_mail');
    $name = 'invitee_mail';
  }
  elseif ($form_state->hasValue('email_address')) {
    $mails = $form_state->getValue('email_address');
    $mails = preg_split('/\r\n/', $mails);
    $name = 'email_address';
  }
  if (!empty($mails)) {
    foreach ($mails as $mail) {
      $user = \Drupal::entityTypeManager()->getStorage('user')->loadByProperties([
        'mail' => $mail,
      ]);
      if (!empty($user)) {
        $user = reset($user);
        $group_content = \Drupal::service('dsjp_pledge.group_service')->loadMembershipByUser($user, GroupServiceInterface::GROUP_TYPE_ORGANIZATION);
        if (!empty($group_content)) {
          $invalid_mails[] = $mail;
        }
      }
    }
    if (!empty($invalid_mails)) {
      $form_state->setErrorByName($name, t('The following mail(s) are already part of an organisation: @mails.', [
        '@mails' => implode(', ', $invalid_mails),
      ]));
    }
  }
}

/**
 * Modified view values for initiative status field.
 */
function dsjp_pledge_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'dsj_reports'  && $view->current_display == 'page_2') {
    foreach ($view->result as $value) {
      $quantity = $value->_entity->get('field_dsj_quantity')->value;
      if ($quantity == 0) {
        $value->_entity->set('field_dsj_initiative_status', 0);
      }
      elseif (!empty($quantity[0])) {
        $json = $value->_entity->get('field_dsj_initiative_status')->value;
        if (!empty($json[0])) {
          $data = json_decode($json, TRUE);
          $data_value = array_sum(array_column($data, 'value'));
          $percentage = ($data_value * 100) / $quantity;
          $percentage = $percentage > 0 ? number_format((float) $percentage, 2) : 0;
          if (floor(floatval($percentage)) == $percentage) {
            $value->_entity->set('field_dsj_initiative_status', floor(floatval($percentage)));
          }
          else {
            $value->_entity->set('field_dsj_initiative_status', $percentage);
          }
        }
        else {
          $value->_entity->set('field_dsj_initiative_status', 0);
        }
      }
    }
  }
}
